
create_asoundrc() {
    local card="$1"
    local device="${2:-0}"
    local ALSA_DEV_ALIAS=$(get ALSA_DEV_ALIAS radio)
    check_var card
    cat <<EOF > ${HOME}/.asoundrc
pcm.$ALSA_DEV_ALIAS {
    type plug
    slave {
        pcm {
            type hw
            card $card
            device $device
        }
    }
}

ctl.$ALSA_DEV_ALIAS {
    type hw
    card $card
}

pcm.default {
    type plug
    slave.pcm "${ALSA_DEV_ALIAS}"
}

ctl.default {
    type hw
    card $card
}
EOF
}

create_direwolf_config() {
    check_var ENV_FILE
    CALLSIGN="$(get CALLSIGN)"
    cat <<EOF > ${QOS_DIR}/direwolf.conf
## DON'T EDIT ${QOS_DIR}/direwolf.conf!
## This file is overwritten by the main BBS config script each time it is run.
EOF
    cat <<EOF >> ${QOS_DIR}/direwolf.conf
ADEVICE  radio
EOF
    cat <<EOF >> ${QOS_DIR}/direwolf.conf
CHANNEL 0
MYCALL ${CALLSIGN}
MODEM 1200
EOF
if [[ -n "${PTT_RTS_DEVICE}" ]]; then
    cat <<EOF >> ${QOS_DIR}/direwolf.conf
PTT ${PTT_RTS_DEVICE} RTS
EOF
fi
}

enable_direwolf_service() {
    check_var QOS_DIR
    mkdir -p ${HOME}/.config/systemd/user
    cat <<EOF > ${HOME}/.config/systemd/user/direwolf.service
## DON'T EDIT THIS SERVICE FILE!
## IT IS GENERATED BY THE BBS ADMIN SCRIPT.
[Unit]
Description=DireWolf TNC for AX.25
AssertPathExists=${QOS_DIR}/direwolf.conf
After=sound.target

[Service]
Type=simple
ExecStart=${QOS_DIR}/bbs.sh start_direwolf
Restart=on-failure
Environment=HOME=%h
WorkingDirectory=${QOS_DIR}

[Install]
WantedBy=default.target
EOF
    systemctl --user daemon-reload
    systemctl --user stop direwolf
    systemctl --user enable --now direwolf
    systemctl --user status direwolf
}

disable_direwolf_service() {
    local unit="${HOME}/.config/systemd/user/direwolf.service"
    echo "Stopping direwolf service (if running)..."
    if systemctl --user is-active --quiet direwolf; then
        systemctl --user stop direwolf
        echo "‚úîÔ∏è  Direwolf service stopped."
    else
        echo "‚ÑπÔ∏è  Direwolf service was not running."
    fi
    if [[ -f "$unit" ]]; then
        rm -f "$unit"
        echo "üóëÔ∏è  Removed service file: $unit"
    else
        echo "‚ÑπÔ∏è  Service file not found, nothing to remove."
    fi
    systemctl --user daemon-reload
    echo "üîÑ Systemd user daemon reloaded."
    return 0
}

set_sound_volumes() {
    local SOUND_DEVICE
    SOUND_DEVICE="$(get SOUND_DEVICE)"
    local SOUND_VOLUME_INPUT
    SOUND_VOLUME_INPUT="$(get SOUND_VOLUME_INPUT 0)"
    local SOUND_VOLUME_OUTPUT
    SOUND_VOLUME_OUTPUT="$(get SOUND_VOLUME_OUTPUT 0.25)"
    check_var SOUND_DEVICE SOUND_VOLUME_INPUT SOUND_VOLUME_OUTPUT
    local card_index
    card_index=$(get_sound_card_index "$SOUND_DEVICE") || return 1
    local input_percent output_percent
    input_percent=$(awk -v v="$SOUND_VOLUME_INPUT" 'BEGIN { printf "%d%%", v * 100 }')
    output_percent=$(awk -v v="$SOUND_VOLUME_OUTPUT" 'BEGIN { printf "%d%%", v * 100 }')
    # Unmute and set playback (output) volume
    amixer -c "$card_index" sset Master "$output_percent" unmute || true
    amixer -c "$card_index" sset Speaker "$output_percent" unmute || true
    amixer -c "$card_index" sset PCM "$output_percent" unmute || true
    # Unmute and set capture (input) volume
    amixer -c "$card_index" sset Capture "$input_percent" cap || true
    amixer -c "$card_index" sset Mic "$input_percent" cap || true
}


start_direwolf() {
    local SOUND_DEVICE="$(get SOUND_DEVICE)"
    check_var SOUND_DEVICE
    local device_index=$(get_sound_card_index "${SOUND_DEVICE}")
    create_asoundrc "${device_index}"
    create_direwolf_config
    set_sound_volumes
    /usr/bin/direwolf -p -t 0 -c "${QOS_DIR}/direwolf.conf"
}

list_alsa_device_names() {
    local buffer=""
    while IFS= read -r line; do
        if [[ "$line" =~ ^[[:space:]]*([0-9]+)[[:space:]]+\[([^\]]+)\][[:space:]]*:\ ([^[:space:]]+)\ -\ (.*)$ ]]; then
            # If there's a previous buffered description, print it
            if [[ -n "$buffer" ]]; then
                echo "$buffer"
            fi
            buffer="${BASH_REMATCH[3]} - ${BASH_REMATCH[4]}|"
        elif [[ -n "$buffer" && -n "$line" ]]; then
            # Trim leading whitespace from continuation line
            line="${line#"${line%%[![:space:]]*}"}"
            buffer+="$line"
        fi
    done < /proc/asound/cards
    # Print last buffer
    if [[ -n "$buffer" ]]; then
        echo "$buffer"
    fi
}

get_sound_card_index() {
    local search="$1"
    check_var search
    local index=""
    local current_index=""
    while IFS= read -r line; do
        if [[ "$line" =~ ^[[:space:]]*([0-9]+)[[:space:]]+\[([^\]]+)\][[:space:]]*:\ ([^[:space:]]+)\ -\ (.*)$ ]]; then
            current_index="${BASH_REMATCH[1]}"
            local dev="${BASH_REMATCH[3]} - ${BASH_REMATCH[4]}"
            if [[ "$dev" == "$search" ]]; then
                index="$current_index"
                break
            fi
        fi
    done < /proc/asound/cards
    if [[ -n "$index" ]]; then
        echo "$index"
    else
        fault "Could not find card index for: $search"
    fi
}
